<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="adTypeRequired" xml:space="preserve">
    <value>Ad type is required.</value>
  </data>
  <data name="bodyTypeMore0" xml:space="preserve">
    <value>Body type selected wrong.</value>
  </data>
  <data name="bodyTypeRequired" xml:space="preserve">
    <value>Body type is required.</value>
  </data>
  <data name="cityExists" xml:space="preserve">
    <value>City exists with NameAz="{0}", or NameRu="{1}", or NameEn="{2}".</value>
  </data>
  <data name="cityNotFound" xml:space="preserve">
    <value>City is not found.</value>
  </data>
  <data name="cityRequired" xml:space="preserve">
    <value>City is required.</value>
  </data>
  <data name="colorExists" xml:space="preserve">
    <value>Color exists with NameAz="{0}", or NameRu="{1}", or NameEn="{2}", or HexCode="{3}".</value>
  </data>
  <data name="colorNotFound" xml:space="preserve">
    <value>Color is not found.</value>
  </data>
  <data name="colorRequired" xml:space="preserve">
    <value>Color is required.</value>
  </data>
  <data name="currencyRequired" xml:space="preserve">
    <value>Currency is required.</value>
  </data>
  <data name="descriptionMaxLength" xml:space="preserve">
    <value>Description must be 2048 chars at most.</value>
  </data>
  <data name="descriptionRequired" xml:space="preserve">
    <value>Description is required.</value>
  </data>
  <data name="drivingWheelsMore0" xml:space="preserve">
    <value>Driving wheels selected wrong.</value>
  </data>
  <data name="drivingWheelsRequired" xml:space="preserve">
    <value>Driving wheels are required.</value>
  </data>
  <data name="enginePowerMore0" xml:space="preserve">
    <value>Engine power entered wrong.</value>
  </data>
  <data name="enginePowerRequired" xml:space="preserve">
    <value>Engine power is required.</value>
  </data>
  <data name="engineVolumeMore0" xml:space="preserve">
    <value>Engine volume entered wrong.</value>
  </data>
  <data name="engineVolumeRequired" xml:space="preserve">
    <value>Engine volume is required.</value>
  </data>
  <data name="exporterCountryMore0" xml:space="preserve">
    <value>Export country selected wrong.</value>
  </data>
  <data name="exporterCountryRequired" xml:space="preserve">
    <value>Export country is required.</value>
  </data>
  <data name="frontPhotoRequired" xml:space="preserve">
    <value>Front image is required.</value>
  </data>
  <data name="fuelTypeMore0" xml:space="preserve">
    <value>Fuel type entered wrong.</value>
  </data>
  <data name="fuelTypeRequired" xml:space="preserve">
    <value>Fuel type is required.</value>
  </data>
  <data name="gasHasCylinder" xml:space="preserve">
    <value>If works with Gas, then has Gas cylinder</value>
  </data>
  <data name="hexCodeNotMatchFormat" xml:space="preserve">
    <value>Invalid hex color code format.</value>
  </data>
  <data name="indexMustBeNumber" xml:space="preserve">
    <value>Index must be a number.</value>
  </data>
  <data name="makeExists" xml:space="preserve">
    <value>Make exists with Name="{0}" or TurboAzId="{1}".</value>
  </data>
  <data name="makeNotFound" xml:space="preserve">
    <value>Make is not found.</value>
  </data>
  <data name="makeRequired" xml:space="preserve">
    <value>Make is required.</value>
  </data>
  <data name="maxMoreMin" xml:space="preserve">
    <value>Minimum win price must be less than maximum.</value>
  </data>
  <data name="modelExists" xml:space="preserve">
    <value>Model exists with Name="{0}", or TurboAzId="{1}", or MakeId="{2}".</value>
  </data>
  <data name="modelNotFound" xml:space="preserve">
    <value>Model is not found.</value>
  </data>
  <data name="modelRequired" xml:space="preserve">
    <value>Model is required.</value>
  </data>
  <data name="nameRequired" xml:space="preserve">
    <value>Name is required.</value>
  </data>
  <data name="numberPlateExists" xml:space="preserve">
    <value>Number plate "{0}" exists.</value>
  </data>
  <data name="numberPlateFalseFormat" xml:space="preserve">
    <value>Number plate is in wrong format.</value>
  </data>
  <data name="numberPlateNotFound" xml:space="preserve">
    <value>Number plate is not found.</value>
  </data>
  <data name="numberPlateRequired" xml:space="preserve">
    <value>Number plate is required.</value>
  </data>
  <data name="objectIsNull" xml:space="preserve">
    <value>Sent object is null.</value>
  </data>
  <data name="odometerMore0" xml:space="preserve">
    <value>Odometer must be positive.</value>
  </data>
  <data name="odometerRequired" xml:space="preserve">
    <value>Odometer is required.</value>
  </data>
  <data name="periodOfTimeLess30" xml:space="preserve">
    <value>Time span must be at most 30 days.</value>
  </data>
  <data name="periodOfTimeMore1" xml:space="preserve">
    <value>Time span must be at least 1 day.</value>
  </data>
  <data name="periodOfTimeRequired" xml:space="preserve">
    <value>Time span is required.</value>
  </data>
  <data name="personPlacesCountMore0" xml:space="preserve">
    <value>Places count entered wrong.</value>
  </data>
  <data name="personPlacesCountRequired" xml:space="preserve">
    <value>Places count is required.</value>
  </data>
  <data name="photosRequired" xml:space="preserve">
    <value>Photos are required.</value>
  </data>
  <data name="placesForMoto" xml:space="preserve">
    <value>Motorcycle can have 3 seats at most.</value>
  </data>
  <data name="priceForRepairMore0" xml:space="preserve">
    <value>Price for repair must be non-negative.</value>
  </data>
  <data name="priceForRepairRequired" xml:space="preserve">
    <value>Price for repair required as the car is damaged.</value>
  </data>
  <data name="priceRequired" xml:space="preserve">
    <value>Price is required.</value>
  </data>
  <data name="rearPhotoRequired" xml:space="preserve">
    <value>Rear image is required.</value>
  </data>
  <data name="required" xml:space="preserve">
    <value>is required.</value>
  </data>
  <data name="transmissionTypeMore0" xml:space="preserve">
    <value>Transmission type selected wrong.</value>
  </data>
  <data name="transmissionTypeRequired" xml:space="preserve">
    <value>Transmission type is required.</value>
  </data>
  <data name="transportationPriceRequired" xml:space="preserve">
    <value>Transportation costs are required.</value>
  </data>
  <data name="transportNotFound" xml:space="preserve">
    <value>Car is not found.</value>
  </data>
  <data name="validityRequired" xml:space="preserve">
    <value>Validity time span is required.</value>
  </data>
  <data name="vinLength" xml:space="preserve">
    <value>Vin code must be 17 symbols length.</value>
  </data>
  <data name="vinMatches" xml:space="preserve">
    <value>Vin code format is wrong.</value>
  </data>
  <data name="vinRequired" xml:space="preserve">
    <value>Vin code is required.</value>
  </data>
  <data name="winPriceMaxRequired" xml:space="preserve">
    <value>Maximum winning price is required.</value>
  </data>
  <data name="winPriceMinRequired" xml:space="preserve">
    <value>Minimum winning price is required.</value>
  </data>
  <data name="winPricesMore0" xml:space="preserve">
    <value>Prices must be non-negative.</value>
  </data>
  <data name="yearLess1900" xml:space="preserve">
    <value>Year must be after 1900.</value>
  </data>
  <data name="yearMoreToday" xml:space="preserve">
    <value>Year cannot be after current year.</value>
  </data>
  <data name="yearRequired" xml:space="preserve">
    <value>Year is required.</value>
  </data>
</root>